@page "/load-data/{rp}"

@inject IJSRuntime jsInterop
@inject IServerService server
@inject NavigationManager navigator


<PageTitle>Rapport - @Value.RowID</PageTitle>

<table id="testata" style="width: 100%;">
    <tbody>
        <tr>
            <td style="width: 40%;"><img src="/img/logoDeltaP.gif" alt="Logo"></td>
            <td style="text-align: left;">
                <span style="font-size: 2rem;color: #003579;">Interventi manutenzione</span>
            </td>
            <td style="text-align: right;width:110px">
                <button id="btLogoff" type="button" class="btn btn-primary" @onclick="BackToList" style="height: 24px; width: 94px;">Back</button>
            </td>
        </tr>
    </tbody>
</table>
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />\
<dl class="dl-horizontal">
    <dt>dataIntervento</dt>
    <dd>@Value.dataIntervento</dd>

    <dt>firmatario</dt>
    <dd>@Value.firmatario</dd>

    <dt>luogoIntervento</dt>
    <dd>@Value.luogoIntervento</dd>

    <dt>statoFattura</dt>
    <dd>@Value.statoFattura</dd>

    <dt>Content</dt>
    <dd>
        <table class="table">
            @*<thead>
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Label</th>
                    <th scope="col">Content</th>
                    <th scope="col">Action</th>
                </tr>
            </thead>*@
            <tbody>
                @if (detail is null)
                {
                    <tr>Loading...</tr>
                }
                else
                {
                    @foreach (var item in detail)
                    {
                        <tr>
                            <td>#</td>
                            <td>@item.label</td>
                            <td>@item.Content</td>
                            <td>
                                @if (item.Content.Contains(".pdf"))
                                {
                                    <button class="btn btn-secondary" @onclick="(()=>Download(item.IdFile))">Download file</button>
                                }
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </dd>
</dl>


@code {
    //[Parameter]
    //public bool WindowVisible { get; set; } = false;

    //[Parameter]
    //public Products Products { get; set; } = default!;

    [Parameter] public string? Rp { get; init; }
    public Value? Value { get; set; } = default!;

    IEnumerable<DetailData> detail = default!;

    protected override async Task OnParametersSetAsync()
    {
        var clean = Rp.Remove(0, nameof(Rp).Count() + 1);
        var o = Convert.FromBase64String(clean);
        Value = JsonSerializer.Deserialize<Value>(o);

        var token = await jsInterop.InvokeAsync<string>("getData", "token");
        if (!string.IsNullOrWhiteSpace(token))
        {
            if (Value is not null)
            {
                var data = await server.GetProductsDetailsAsync(token, id: Value.RowID);
                if (data is not null)
                {
                    if (data.Status == "SUCCESS")
                    {
                        detail = new List<DetailData>(data.Data.Value);
                    }
                }
            }
        }
    }

    async void Download(string id)
    {
        var token = await jsInterop.InvokeAsync<string>("getData", "token");
        if (!string.IsNullOrWhiteSpace(token))
        {
            var downloaded = await server.DownloadProceess(token, id);
        }
    }

    private void BackToList()
    {
        navigator.NavigateTo("/load-data");
    }

}
